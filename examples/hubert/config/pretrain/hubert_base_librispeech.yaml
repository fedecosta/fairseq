# @package _group_

common:
  fp16: true
  log_format: json
  log_file: '/gpfs/projects/bsc88/speech/research/outputs/logs/hubert/fairseq_train_log.txt' # added by me
  log_interval: 100 # modified by me, original 200
  seed: 1337
  tensorboard_logdir: tblog
  #model_parallel_size: 8 # total number of GPUs to parallelize model over
  #reset_logging: True # added by me

checkpoint:
  save_interval: 1 # added by me, save a checkpoint every N epochs
  #save_interval_updates: 25000 # save a checkpoint (and validate) every N updates
  keep_interval_updates: 1 # keep the last N checkpoints saved with --save-interval-updates
  no_epoch_checkpoints: true # only store last and best checkpoints
  save_dir: 'checkpoints' # added by me

#common_eval:
#  path: 'research/outputs/checkpoints/fairseq/hubert' # added by me
#  results_path: 'research/outputs/checkpoints/fairseq/hubert' # added by me

distributed_training:
  ddp_backend: no_c10d
  distributed_backend: 'nccl'
  distributed_world_size: 4 # total number of GPUs across all nodes (default: all visible GPUs)
  #distributed_num_procs: 1 # total number of processes to fork (default: all visible GPUs) 
  distributed_port: 29671
  #nprocs_per_node: 4 # number of GPUs in each node. An allreduce operation across GPUs in a node is very fast. Hence, we do allreduce across GPUs in a node, and gossip across different nodes
  find_unused_parameters: true

task:
  _name: hubert_pretraining
  data: ???
  label_dir: ???
  labels: ???
  label_rate: ${model.label_rate}
  sample_rate: 16000 # modified by me
  max_sample_size: 250000
  min_sample_size: 32000
  pad_audio: false
  random_crop: true
  normalize: false # must be consistent with extractor

dataset:
  num_workers: 6 # how many subprocesses to use for data loading
  max_tokens: 1400000 # maximum number of tokens in a batch
  skip_invalid_size_inputs_valid_test: true
  validate_interval: 1 # validate every N epochs
  #validate_interval_updates: 10000 # validate every N updates

criterion:
  _name: hubert
  pred_masked_weight: 1.0
  pred_nomask_weight: 0.0
  loss_weights: [10,]

optimization:
  max_update: 400000
  lr: [0.0005]
  clip_norm: 10.0
  max_epoch: 1 # if 0, no epoch limit 

optimizer:
  _name: adam
  adam_betas: (0.9,0.98)
  adam_eps: 1e-06
  weight_decay: 0.01

lr_scheduler:
  _name: polynomial_decay
  warmup_updates: 32000

model:
  _name: hubert
  label_rate: ???
  skip_masked: false
  skip_nomask: false
  mask_prob: 0.80
  extractor_mode: default
  conv_feature_layers: '[(512,10,5)] + [(512,3,2)] * 4 + [(512,2,2)] * 2'
  final_dim: 256
  encoder_layerdrop: 0.05
  dropout_input: 0.1
  dropout_features: 0.1
  dropout: 0.1
  attention_dropout: 0.1
  feature_grad_mult: 0.1
  untie_final_proj: true
  activation_dropout: 0.0
  #encoder_attention_heads: 12 # num encoder attention heads (default 12)

hydra:
  job:
    config:
      override_dirname:
        kv_sep: '-'
        item_sep: '__'
        exclude_keys:
          - run
          - task.data
          - task.label_dir
  run:
    dir: ???
  sweep:
    dir: ???
    subdir: ${hydra.job.config_name}__${hydra.job.override_dirname}
